{"version":3,"file":"static/js/371.ceff1ff1.chunk.js","mappings":"2OAmBA,EAhBmB,SAAC,GAAe,IAAbA,EAAY,EAAZA,MACZC,EAA4DD,EAA5DC,MAAOC,EAAqDF,EAArDE,SAAf,EAAoEF,EAA3CG,OAAAA,OAAzB,MAAkC,GAAlC,EAAsCC,EAA8BJ,EAA9BI,YAAaC,EAAiBL,EAAjBK,aAC7CC,EAASC,EAAAA,GAAiBH,EAC1BI,EAAQC,KAAKC,MAAqB,GAAfL,GACzB,OACE,4BACE,gBAAKM,IAAKL,EAAQM,IAAI,MACrB,wBAAKX,KACN,wCAAgBO,EAAhB,QACA,sCACA,uBAAIN,KACJ,oCACA,uBAAIC,EAAOU,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,UAG9C,ECwBD,EAlCqB,WAAO,IAAD,IACzB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOjB,EAAP,KAAckB,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,WAW3D,OATAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBT,GACbU,MAAK,SAAA7B,GAAK,OAAIkB,EAASlB,EAAb,IACV8B,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAhB,GACb,GAAE,CAACZ,IAEJa,QAAQC,IAAId,GACZa,QAAQC,IAAIjC,IAGV,iCACE,SAAC,KAAD,CAAMkC,GAAIX,EAAoBY,QAA9B,iCACA,SAAC,EAAD,CAAYnC,MAAOA,EAAOmB,QAASA,KAEnC,2BACE,yBACE,SAAC,KAAD,CAAMe,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,WAAT,2BAGJ,SAAC,EAAAE,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,QAIP,C,sNChCDC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAS,oCAGJ,IAAMhC,EAAiB,kCACxBiC,EACM,uBADNA,EAEI,gBAFJA,EAGU,UAGHC,EAAiB,mCAAG,oGACRH,EAAAA,EAAAA,IAAUE,GADF,cACzBE,EADyB,yBAExBA,EAASC,KAAKC,SAFU,2CAAH,qDAKjBC,EAAkB,mCAAG,WAAMC,GAAN,gFAC1BC,EAAU,CACdC,OAAQ,CAAEC,MAAOH,IAFa,SAITR,EAAAA,EAAAA,IAAUE,EAAwBO,GAJzB,cAI1BL,EAJ0B,yBAKzBA,EAASC,KAAKC,SALW,2CAAH,sDAQlBhB,EAAe,mCAAG,WAAMsB,GAAN,uFACNZ,EAAAA,EAAAA,IAAUE,EAA+BU,GADnC,cACvBR,EADuB,OAE7BV,QAAQC,IAAIS,EAASC,MAFQ,kBAGtBD,EAASC,MAHa,2CAAH,sDAMfQ,EAAe,mCAAG,WAAMD,GAAN,uFACNZ,EAAAA,EAAAA,IACrBE,EAA+BU,EAAK,YAFT,cACvBR,EADuB,OAI7BV,QAAQC,IAAIS,EAASC,KAAKC,SAJG,kBAKtBF,EAASC,KAAKC,SALQ,2CAAH,sDAQfQ,EAAY,mCAAG,WAAMF,GAAN,uFACHZ,EAAAA,EAAAA,IACrBE,EAA+BU,EAAK,YAFZ,cACpBR,EADoB,OAI1BV,QAAQC,IAAIS,EAASC,KAAKU,MAJA,kBAKnBX,EAASC,KAAKU,MALK,2CAAH,qD","sources":["components/MoviesInfo.jsx","Pages/MovieDetails.jsx","Services/Api.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\n\nimport { IMAGE_BASE_URL } from 'Services/Api';\nconst MoviesInfo = ({ movie }) => {\n  const { title, overview, genres = [], poster_path, vote_average } = movie;\n  const imgUrl = IMAGE_BASE_URL + poster_path;\n  const score = Math.floor(vote_average * 10);\n  return (\n    <div>\n      <img src={imgUrl} alt=\"\" />\n      {<h1>{title}</h1>}\n      <p>User score: {score}%</p>\n      <h2>Overview</h2>\n      <p>{overview}</p>\n      <h2>Genres</h2>\n      <p>{genres.map(genre => genre.name).join(', ')}</p>\n    </div>\n  );\n};\nexport default MoviesInfo;\n\nMoviesInfo.propTypes = { movie: PropTypes.object.isRequired };\n","import { useParams, useLocation } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport { Outlet } from 'react-router-dom';\nimport { useRef, Suspense } from 'react';\nimport MoviesInfo from 'components/MoviesInfo';\nimport { useEffect, useState } from 'react';\nimport { getMovieDetails } from 'Services/Api';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState([]);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/movies');\n\n  useEffect(() => {\n    getMovieDetails(movieId)\n      .then(movie => setMovie(movie))\n      .catch(err => console.log(err));\n  }, [movieId]);\n\n  console.log(movieId);\n  console.log(movie);\n\n  return (\n    <>\n      <Link to={backLinkLocationRef.current}>Back to movie list</Link>\n      <MoviesInfo movie={movie} movieId={movieId} />\n\n      <ul>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews \">Reviews</Link>\n        </li>\n      </ul>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\nexport default MovieDetails;\n","// 1efdf9e7a9ff7e2165fc0b365172fcf9\n\n// /trending/get-trending список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\n// /search/search-movies пошук фільму за ключовим словом на сторінці фільмів.\n// /movies/get-movie-details запит повної інформації про фільм для сторінки кінофільму.\n// /movies/get-movie-credits запит інформації про акторський склад для сторінки кінофільму.\n// /movies/get-movie-reviews запит оглядів для сторінки кінофільму.\n\nimport axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: '1efdf9e7a9ff7e2165fc0b365172fcf9',\n};\n\nexport const IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w500';\nconst URLSearchParams = {\n  trending: '/trending/movie/week',\n  search: '/search/movie',\n  movieDetails: '/movie/',\n};\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(URLSearchParams.trending);\n  return response.data.results;\n};\n\nexport const getSearchingMovies = async searchFilm => {\n  const options = {\n    params: { query: searchFilm },\n  };\n  const response = await axios.get(URLSearchParams.search, options);\n  return response.data.results;\n};\n\nexport const getMovieDetails = async id => {\n  const response = await axios.get(URLSearchParams.movieDetails + id);\n  console.log(response.data);\n  return response.data;\n};\n\nexport const getMovieReviews = async id => {\n  const response = await axios.get(\n    URLSearchParams.movieDetails + id + '/reviews'\n  );\n  console.log(response.data.results);\n  return response.data.results;\n};\n\nexport const getMovieCast = async id => {\n  const response = await axios.get(\n    URLSearchParams.movieDetails + id + '/credits'\n  );\n  console.log(response.data.cast);\n  return response.data.cast;\n};\n"],"names":["movie","title","overview","genres","poster_path","vote_average","imgUrl","IMAGE_BASE_URL","score","Math","floor","src","alt","map","genre","name","join","useState","setMovie","movieId","useParams","location","useLocation","backLinkLocationRef","useRef","state","from","useEffect","getMovieDetails","then","catch","err","console","log","to","current","Suspense","fallback","axios","api_key","URLSearchParams","getTrendingMovies","response","data","results","getSearchingMovies","searchFilm","options","params","query","id","getMovieReviews","getMovieCast","cast"],"sourceRoot":""}